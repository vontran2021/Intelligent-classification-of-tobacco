# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project1_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import json
import shutil
import numpy as np
from PIL import Image
import sys
import cv2 as cv
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QWidget, QDialogButtonBox, QApplication, \
    QMainWindow, QFileDialog
from PyQt5.QtGui import QPixmap, QImage, QDesktopServices, QPalette, QBrush, QIcon
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QBuffer, QIODevice, QUrl
import cv2
import RecognitionPy.RecognitionFreshTobacco as ReFresh
import RecognitionPy.RecognitionCuringTobacco as ReCuring
import RecognitionPy.RecognitionFluedTobacco as ReFlued
from ImageProcessPy.RgbHistogram import rgbCurve
from ImageProcessPy.Dehazed_image import dehaze_image
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QFileDialog, QDialog, QVBoxLayout, \
    QDialogButtonBox, QLineEdit
from PyQt5.QtGui import QPixmap, QPainter, QFont
from ImageProcessPy.random_noise import add_noise_to_images
from QCandyUi.CandyWindow import colorful
from QCandyUi import CandyWindow
import Video_stroom.Video_torchCuringStage as ViCuring
import Video_stroom.Video_torchFlueCuredTobacco as ViFlued
import Video_stroom.Video_torchFreshTobacco as ViFresh

# @colorful('blueDeep')


class Ui_MyWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.images = []  # 图片文件列表
        self.current_image_index = 0  # 当前显示的图片索引
        self.show_current_image()  # 显示当前图片
        self.model = None  # 当前使用的模型
        self.setupUi(self)

        self.camera = cv2.VideoCapture(1, cv2.CAP_DSHOW)
        self.is_camera_opened = False  # 摄像头有没有打开标记

        # 定时器：30ms捕获一帧
        self._timer = QtCore.QTimer(self)
        self._timer.timeout.connect(self._queryFrame)
        self._timer.setInterval(30)

        self.processing_dialog = None  # "处理中..." 对话框

    def setupUi(self, MyWindow):
        background = QPalette()
        """ 主界面背景美化"""
        background.setBrush(QPalette.Background, QBrush(QPixmap("./Image/background.png")))
        MyWindow.setPalette(background)
        MyWindow.setWindowIcon(QIcon('./Image/swu.png'))
        MyWindow.setObjectName("MyWindow")
        MyWindow.resize(1200, 1000)
        MyWindow.setFixedSize(1200, 1000)
        self.centralwidget = QtWidgets.QWidget(MyWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(10, 890, 1190, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(810, 80, 16, 810))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(830, 120, 350, 700))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.plainTextEdit.sizePolicy().hasHeightForWidth())
        self.plainTextEdit.setSizePolicy(sizePolicy)
        self.plainTextEdit.setMinimumSize(QtCore.QSize(300, 700))

        font = QtGui.QFont()
        font.setItalic(False)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(412, 102, 400, 350))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 504, 400, 350))
        self.label_5.setStyleSheet("")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(412, 504, 400, 350))
        self.label_6.setObjectName("label_6")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setEnabled(True)
        self.label_3.setGeometry(QtCore.QRect(10, 102, 400, 350))
        self.label_3.setObjectName("label_3")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(400, 840, 75, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(980, 80, 75, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(850, 840, 75, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(1090, 840, 75, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(600, 10, 150, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(700, 10, 300, 30))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(200, 840, 150, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 55, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.previous_button = QtWidgets.QPushButton(self.centralwidget)
        self.previous_button.setGeometry(QtCore.QRect(150, 55, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.previous_button.setFont(font)
        self.previous_button.setObjectName("pushButton_2")
        self.next_button = QtWidgets.QPushButton(self.centralwidget)
        self.next_button.setGeometry(QtCore.QRect(290, 55, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.next_button.setFont(font)
        self.next_button.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 150, 30))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(180, 10, 150, 30))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        MyWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MyWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 908, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menuFeedback = QtWidgets.QMenu(self.menu_4)
        self.menuFeedback.setObjectName("menuFeedback")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        MyWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MyWindow)
        self.statusbar.setObjectName("statusbar")
        MyWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MyWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(MyWindow)
        self.actionOpen.setObjectName("actionOpen")

        self.actionSave = QtWidgets.QAction(MyWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionTailor = QtWidgets.QAction(MyWindow)
        self.actionTailor.setObjectName("actionTailor")
        self.actionText = QtWidgets.QAction(MyWindow)
        self.actionText.setObjectName("actionText")
        self.actionHistogram = QtWidgets.QAction(MyWindow)
        self.actionHistogram.setObjectName("actionHistogram")
        self.actionEqualization = QtWidgets.QAction(MyWindow)
        self.actionEqualization.setObjectName("actionEqualization")
        self.actionGray = QtWidgets.QAction(MyWindow)
        self.actionGray.setObjectName("actionGray")
        self.actionThreshold = QtWidgets.QAction(MyWindow)
        self.actionThreshold.setObjectName("actionEqualization_2")
        self.actionEntropy = QtWidgets.QAction(MyWindow)
        self.actionEntropy.setObjectName("actionEntropy")
        self.actionEmail = QtWidgets.QAction(MyWindow)
        self.actionEmail.setObjectName("actionEmail")
        self.actionWeb = QtWidgets.QAction(MyWindow)
        self.actionWeb.setObjectName("actionWab")
        self.actionSetting = QtWidgets.QAction(MyWindow)
        self.actionSetting.setObjectName("actionSetting")
        self.actionModel = QtWidgets.QAction(MyWindow)
        self.actionModel.setObjectName("actionModel")
        self.actionWeight = QtWidgets.QAction(MyWindow)
        self.actionWeight.setObjectName("actionWeight")
        self.menu.addAction(self.actionNew)
        self.menu.addAction(self.actionOpen)
        self.menu.addAction(self.actionSave)
        self.menu.addAction(self.actionSetting)
        self.menu_2.addAction(self.actionTailor)
        self.menu_2.addAction(self.actionText)
        self.menu_3.addAction(self.actionHistogram)
        self.menu_3.addAction(self.actionGray)
        self.menu_3.addAction(self.actionThreshold)
        self.menu_3.addAction(self.actionEntropy)
        self.menuFeedback.addAction(self.actionEmail)
        self.menuFeedback.addAction(self.actionWeb)
        self.menu_4.addAction(self.menuFeedback.menuAction())
        self.menu_5.addAction(self.actionModel)
        self.menu_5.addAction(self.actionWeight)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())

        '''*************************************信号连接****************************************************'''
        # 菜单栏
        self.retranslateUi(MyWindow)
        self.actionOpen.triggered.connect(self.open_folder)
        self.actionGray.triggered.connect(self.btnGray_Clicked)
        self.actionThreshold.triggered.connect(self.btnThreshold_Clicked)
        self.actionHistogram.triggered.connect(self.btnrgbHistogram_Clicked)
        self.actionSave.triggered.connect(self.save_Alldata)
        self.actionWeight.triggered.connect(self.copyWeightFile)
        self.actionModel.triggered.connect(self.copyModelFile)
        self.actionEmail.triggered.connect(self.open_email_client)
        self.actionWeb.triggered.connect(self.open_github_project)
        self.actionEntropy.triggered.connect(self.image_dehazed)
        self.actionText.triggered.connect(self.open_dialog)
        self.actionTailor.triggered.connect(self.Add_noise)
        self.actionSetting.triggered.connect(self.BuildNone)
        self.actionNew.triggered.connect(self.Newbuild)

        # 内部界面
        self.pushButton_6.clicked.connect(self.btnReadImage_Clicked)
        self.pushButton_3.clicked.connect(self.predictFlueTobacco)
        self.previous_button.clicked.connect(self.show_previous_image)
        # self.previous_button.clicked.connect(self.predictFlueTobacco)
        self.next_button.clicked.connect(self.show_next_image)
        # self.next_button.clicked.connect(self.predictFlueTobacco)
        # self.comboBox.activated['int'].connect(MyWindow.renwe)
        # self.comboBox.currentIndexChanged.connect(MyWindow.renwe)
        self.pushButton_7.clicked.connect(self.btnOpenCamera_Clicked)
        self.pushButton_8.clicked.connect(self.btnCapture_Clicked)
        self.pushButton_8.clicked.connect(self.saveImage)
        self.pushButton_4.clicked.connect(self.saveTextFile)
        self.pushButton_5.clicked.connect(self.clearText)
        # self.plainTextEdit.copyAvailable['bool'].connect(self.pushButton_4.animateClick)
        QtCore.QMetaObject.connectSlotsByName(MyWindow)
        '''*************************************信号连接****************************************************'''

        self.show_current_image()  # 显示当前图片

    def retranslateUi(self, MyWindow):
        _translate = QtCore.QCoreApplication.translate
        MyWindow.setWindowTitle(_translate("MyWindow", "基于神经网络的烟草图像分析系统V1.0"))
        self.plainTextEdit.setPlainText(_translate("MyWindow", "识别结果："))
        self.plainTextEdit.setReadOnly(True)

        self.label_4.setText(_translate("MyWindow", "<html><head/><body><p align=\"center\">图像处理结果</p></body></html>"))
        self.label_5.setText(_translate("MyWindow", "<html><head/><body><p align=\"center\">摄像头</p></body></html>"))
        self.label_6.setText(_translate("MyWindow", "<html><head/><body><p align=\"center\">抓取图</p></body></html>"))
        self.label_3.setText(_translate("MyWindow", "<html><head/><body><p align=\"center\">图像</p></body></html>"))
        self.pushButton_8.setText(_translate("MyWindow", "抓图"))
        self.pushButton_3.setText(_translate("MyWindow", "识别"))
        self.pushButton_4.setText(_translate("MyWindow", "导出"))
        self.pushButton_5.setText(_translate("MyWindow", "清除"))
        self.label_2.setText(_translate("MyWindow", "文件地址："))
        self.pushButton_7.setText(_translate("MyWindow", "打开摄像头"))
        self.pushButton_6.setText(_translate("MyWindow", "浏览"))
        self.previous_button.setText(_translate("MyWindow", "上一张"))
        self.next_button.setText(_translate("MyWindow", "下一张"))
        self.label.setText(_translate("MyWindow",
                                      "<html><head/><body><p><span style=\" font-weight:600; color:#000000;\">选择识别类型：</span></p></body></html>"))
        self.comboBox.setItemText(0, _translate("MyWindow", "烟叶成熟度"))
        self.comboBox.setItemText(1, _translate("MyWindow", "烘烤阶段"))
        self.comboBox.setItemText(2, _translate("MyWindow", "烤烟等级"))
        self.menu.setTitle(_translate("MyWindow", "文件"))
        self.menu_2.setTitle(_translate("MyWindow", "编辑"))
        self.menu_3.setTitle(_translate("MyWindow", "工具"))
        self.menu_4.setTitle(_translate("MyWindow", "帮助"))
        self.menuFeedback.setTitle(_translate("MyWindow", "反馈"))
        self.menu_5.setTitle(_translate("MyWindow", "加载"))
        self.actionNew.setText(_translate("MyWindow", "新建"))
        self.actionOpen.setText(_translate("MyWindow", "打开"))
        self.actionSave.setText(_translate("MyWindow", "保存"))
        self.actionTailor.setText(_translate("MyWindow", "添加噪声"))
        self.actionText.setText(_translate("MyWindow", "文本标注"))
        self.actionHistogram.setText(_translate("MyWindow", "直方图"))
        self.actionEqualization.setText(_translate("MyWindow", "均衡化"))
        self.actionGray.setText(_translate("MyWindow", "灰度化"))
        self.actionThreshold.setText(_translate("MyWindow", "阈值分割"))
        self.actionEntropy.setText(_translate("MyWindow", "去雾"))
        self.actionEmail.setText(_translate("MyWindow", "Email"))
        self.actionWeb.setText(_translate("MyWindow", "GitHub"))
        self.actionSetting.setText(_translate("MyWindow", "视频流"))
        self.actionModel.setText(_translate("MyWindow", "模型"))
        self.actionWeight.setText(_translate("MyWindow", "权重"))

    def btnOpenCamera_Clicked(self):
        '''
        打开和关闭摄像头
        '''
        self.is_camera_opened = ~self.is_camera_opened
        if self.is_camera_opened:
            self.pushButton_7.setText("关闭摄像头")
            self._timer.start()
        else:
            self.pushButton_7.setText("打开摄像头")
            self._timer.stop()

    def btnCapture_Clicked(self):
        '''
        捕获图片
        '''
        # 摄像头未打开，不执行任何操作
        if not self.is_camera_opened:
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未打开摄像头')
            msg_box.exec_()
            return

        self.captured = self.frame
        # print(self.captured)
        # print(type(self.captured))

        # 后面这几行代码几乎都一样，可以尝试封装成一个函数
        rows, cols, channels = self.captured.shape
        bytesPerLine = channels * cols
        # Qt显示图片时，需要先转换成QImgage类型
        QImg = QImage(self.captured.data, cols, rows, bytesPerLine, QImage.Format_RGB888)
        self.label_6.setPixmap(QPixmap.fromImage(QImg).scaled(
            self.label_6.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def btnReadImage_Clicked(self):
        '''
        从本地读取图片
        '''
        # 打开文件选取对话框
        global filename

        filename, _ = QFileDialog.getOpenFileName(self, '打开图片')
        if filename:
            self.captured = cv.imread(str(filename))
            # OpenCV图像以BGR通道存储，显示时需要从BGR转到RGB
            self.captured = cv.cvtColor(self.captured, cv.COLOR_BGR2RGB)

            rows, cols, channels = self.captured.shape
            bytesPerLine = channels * cols
            QImg = QImage(self.captured.data, cols, rows, bytesPerLine, QImage.Format_RGB888)
            self.label_3.setPixmap(QPixmap.fromImage(QImg).scaled(
                self.label_3.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.lineEdit.setText(str(filename))
        self.plainTextEdit.appendPlainText(str(filename))
        print(str(filename))

    def btnGray_Clicked(self):
        '''
        灰度化
        '''
        global GrayImage
        GrayImage = None  # 设置空变量用于储存灰度图
        # 如果没有捕获图片，则不执行操作
        if not hasattr(self, "captured"):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未导入照片')
            msg_box.exec_()
            return
        self.show_processing_dialog()
        self.cpatured = cv.cvtColor(self.captured, cv.COLOR_RGB2GRAY)
        GrayImage = Image.fromarray(self.cpatured.astype('uint8')).convert('RGB')
        print(type(self.cpatured))

        rows, columns = self.cpatured.shape
        bytesPerLine = columns
        # 灰度图是单通道，所以需要用Format_Indexed8
        QImg = QImage(self.cpatured.data, columns, rows, bytesPerLine, QImage.Format_Indexed8)
        self.label_4.setPixmap(QPixmap.fromImage(QImg).scaled(
            self.label_4.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

        QtCore.QTimer.singleShot(2000, self.close_processing_dialog)  # 延迟关闭对话框

    def btnThreshold_Clicked(self):
        '''
        Otsu自动阈值分割,需要进行灰度化处理后
        '''
        if not hasattr(self, "captured"):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未导入照片')
            msg_box.exec_()
            return
        self.show_processing_dialog()
        self.cpatured = cv.cvtColor(self.captured, cv.COLOR_RGB2GRAY)
        _, self.cpatured = cv.threshold(
            self.cpatured, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)

        rows, columns = self.cpatured.shape
        bytesPerLine = columns
        # 阈值分割图也是单通道，也需要用Format_Indexed8
        QImg = QImage(self.cpatured.data, columns, rows, bytesPerLine, QImage.Format_Indexed8)
        self.label_4.setPixmap(QPixmap.fromImage(QImg).scaled(
            self.label_4.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

        QtCore.QTimer.singleShot(5000, self.close_processing_dialog)  # 延迟关闭对话框

    def btnrgbHistogram_Clicked(self):
        '''
        画出RGB三通道曲线图
        '''
        if not hasattr(self, "captured"):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未导入照片')
            msg_box.exec_()
            return
        self.show_processing_dialog()
        # BGR转RGB
        self.captured = cv2.cvtColor(self.captured, cv2.COLOR_BGR2RGB)
        temp_img_path = rgbCurve(self.captured)
        # r, g, b = cv2.split(self.captured)
        # # 对通道值进行排序
        # r_sorted = np.sort(r.flatten())
        # g_sorted = np.sort(g.flatten())
        # b_sorted = np.sort(b.flatten())
        # # 绘制RGB三通道值曲线
        # plt.plot(r_sorted, color='red', label='Red')
        # plt.plot(g_sorted, color='green', label='Green')
        # plt.plot(b_sorted, color='blue', label='Blue')
        # plt.xlabel('Pixel')
        # plt.ylabel('Intensity')
        # plt.legend()
        # # 将绘制的曲线保存为临时图片
        # temp_img_path = './temp_plot.png'
        # plt.savefig(temp_img_path)
        # plt.close()
        # 创建标签控件并显示绘制的曲线图片
        pixmap = QPixmap(temp_img_path)
        pixmap = pixmap.scaled(400, 350)
        self.label_4.setPixmap(pixmap)
        # # 后面这几行代码几乎都一样，可以尝试封装成一个函数
        # rows, cols, channels = pixmap.shape
        # bytesPerLine = channels * cols
        # # Qt显示图片时，需要先转换成QImgage类型
        # QImg = QImage(self.captured.data, cols, rows, bytesPerLine, QImage.Format_RGB888)
        # self.label_6.setPixmap(QPixmap.fromImage(QImg).scaled(
        #     self.label_6.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        QtCore.QTimer.singleShot(5000, self.close_processing_dialog)  # 延迟关闭对话框

    def image_dehazed(self):
        '''
        去雾处理
        '''
        if not hasattr(self, "captured"):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未导入照片')
            msg_box.exec_()
            return
        self.show_processing_dialog()
        # if self.cpatured:
        # 方法1
        # self.cpatured = dehaze_image(self.cpatured)
        # print(filename)
        # print(self.cpatured)
        # print(type(self.cpatured))
        # 方法2
        dehaze_image(filename)
        self.dehaze_image = cv.imread("./ImageProcessPy/Img/dehazed_image.jpg")
        #   OpenCV图像以BGR通道存储，显示时需要从BGR转到RGB
        self.dehaze_image = cv.cvtColor(self.dehaze_image, cv.COLOR_BGR2RGB)

        rows, cols, channels = self.dehaze_image.shape
        bytesPerLine = channels * cols
        QImg = QImage(self.dehaze_image.data, cols, rows, bytesPerLine, QImage.Format_RGB888)
        self.label_4.setPixmap(QPixmap.fromImage(QImg).scaled(
            self.label_4.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

        QtCore.QTimer.singleShot(3000, self.close_processing_dialog)  # 延迟关闭对话框
        # msg_box = QMessageBox(QMessageBox.Information, '提示', '去雾成功')
        # msg_box.exec_()

    '''添加噪声'''

    def Add_noise(self):
        '''
        随机噪声
        '''

        if not hasattr(self, "captured"):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未导入照片')
            msg_box.exec_()
            return
        self.show_processing_dialog()

        NoiseType = add_noise_to_images(filename)
        NoiseType = "噪声类别: {}".format(NoiseType)

        self.noise_image = cv.imread("./ImageProcessPy/Img/noisy_image.jpg")
        #   OpenCV图像以BGR通道存储，显示时需要从BGR转到RGB
        self.noise_image = cv.cvtColor(self.noise_image, cv.COLOR_BGR2RGB)

        rows, cols, channels = self.noise_image.shape
        bytesPerLine = channels * cols
        QImg = QImage(self.noise_image.data, cols, rows, bytesPerLine, QImage.Format_RGB888)
        self.label_4.setPixmap(QPixmap.fromImage(QImg).scaled(
            self.label_4.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

        self.plainTextEdit.appendPlainText(NoiseType)
        QtCore.QTimer.singleShot(3000, self.close_processing_dialog)  # 延迟关闭对话框

    @QtCore.pyqtSlot()
    def _queryFrame(self):
        '''
        循环捕获图片
        '''
        ret, self.frame = self.camera.read()

        img_rows, img_cols, channels = self.frame.shape
        bytesPerLine = channels * img_cols

        cv.cvtColor(self.frame, cv.COLOR_BGR2RGB, self.frame)
        QImg = QImage(self.frame.data, img_cols, img_rows, bytesPerLine, QImage.Format_RGB888)
        self.label_5.setPixmap(QPixmap.fromImage(QImg).scaled(
            self.label_5.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def get_image_from_label(self, label):
        '''
        捕获label上所显示图片
        '''
        pixmap = label.pixmap()
        image = pixmap.toImage()
        buffer = QBuffer()
        buffer.open(QIODevice.ReadWrite)
        image.save(buffer, "JPEG")
        buffer.seek(0)
        data = buffer.data()
        nparr = np.frombuffer(data, np.uint8)
        image_np = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        image_pil = Image.fromarray(cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB))
        return image_pil

    # 图像识别
    def predictFlueTobacco(self):
        '''
        识别烟草图像
        '''
        model_name = self.comboBox.currentText()  # 获取模型类别下拉菜单“类别字符串”
        print(model_name)

        self.predictImg = None  # 识别图像储存变量
        # predictImg = self.captured

        # 如果没有捕获图片，则不执行操作
        if not hasattr(self, "captured"):
            self.plainTextEdit.setPlainText("no image select, to return")  # 如果没有加载图片，则预警
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '出现错误')
            msg_box.exec_()
            return
        if not hasattr(self, "predictImg"):
            self.plainTextEdit.setPlainText("no image select, to return")
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '出现错误')
            msg_box.exec_()
            return
        self.show_processing_dialog()  # 加载等待断点
        if self.predictImg:
            self.plainTextEdit.appendPlainText("CaptureImage")  # 以添加新行的方式将识别结果载入界面
            self.predictImg = self.get_image_from_label(self.label_6)  # 获取摄像图片截图
        else:
            self.predictImg = Image.fromarray(self.captured)  # 获取本地图像
        print(self.predictImg)
        # if filename is not None:
        #     self.predictImg = Image.open(str(filename))
        # self.predictImg = cv.cvtColor(self.predictImg, cv.COLOR_BGR2RGB)
        # self.captured = self.predictImg
        # self.comboBox.setItemText(0, _translate("MyWindow", "烟叶成熟度"))
        # self.comboBox.setItemText(1, _translate("MyWindow", "烘烤阶段"))
        # self.comboBox.setItemText(2, _translate("MyWindow", "烤烟等级"))

        # 模型加载
        if model_name == "烟叶成熟度":
            predict_class = ReFresh.image_predic(self.predictImg)
            self.plainTextEdit.appendPlainText(str(predict_class))  # 将结果打印在文本框中
        elif model_name == "烘烤阶段":
            predict_class = ReCuring.image_predic(self.predictImg)
            self.plainTextEdit.appendPlainText(str(predict_class))  # 将结果打印在文本框中
        elif model_name == "烤烟等级":
            predict_class = ReFlued.image_predic(self.predictImg)
            self.plainTextEdit.appendPlainText(str(predict_class))  # 将结果打印在文本框中
        # self.plainTextEdit.setPlainText(str(predict_class))

        # self.plainTextEdit.appendPlainText(str(predict_class))  # 将结果打印在文本框中

        QtCore.QTimer.singleShot(2000, self.close_processing_dialog)  # 延迟关闭对话框

    # 打开文件夹
    def open_folder(self):
        folder_path = QFileDialog.getExistingDirectory(self, '选择文件夹')
        if folder_path:
            self.load_images_from_folder(folder_path)

    def load_images_from_folder(self, folder_path):
        self.images = []
        if os.path.exists(folder_path) and os.path.isdir(folder_path):
            image_extensions = (".jpg", ".jpeg", ".png", ".gif")  # 图片文件扩展名
            for file_name in os.listdir(folder_path):
                file_path = os.path.join(folder_path, file_name)
                if os.path.isfile(file_path) and file_name.lower().endswith(image_extensions):
                    self.images.append(file_path)
            self.current_image_index = 0
            self.show_current_image()

    def show_current_image(self):
        if self.images:
            filename = self.images[self.current_image_index]
            pixmap = QPixmap(filename)
            self.label_3.setPixmap(pixmap.scaled(400, 350, aspectRatioMode=QtCore.Qt.KeepAspectRatio))
            self.captured = cv.imread(str(filename))
            self.plainTextEdit.appendPlainText(filename)

    def show_previous_image(self):
        if self.current_image_index > 0:
            self.current_image_index -= 1
            self.show_current_image()
            self.predictFlueTobacco()

    def show_next_image(self):
        if self.current_image_index < len(self.images) - 1:
            self.current_image_index += 1
            self.show_current_image()
            self.predictFlueTobacco()

    # 保存图片到本地
    def saveImage(self):
        global filename
        '''未打开摄像头不执行任何操作'''
        if not self.is_camera_opened:

            return
        # 获取label显示的图片
        pixmap_2 = self.label_6.pixmap()
        # 弹出文件保存对话框，选择保存路径和文件名
        file_dialog = QFileDialog()
        filename = file_dialog.getSaveFileName(self.centralwidget, "保存文件", "./Image/CaptureImage.jpg", "*.jpg;;All Files(*)")
        if filename:
            # 保存图片
            if pixmap_2 is not None:
                # pixmap_2.save(filename + "CaptureImage.jpg", "JPG")
                pixmap_2.save("./Image/CaptureImage.jpg", "JPG")
        filename = filename[0]
        msg_box = QMessageBox(QMessageBox.Information, '提示', '保存成功')
        msg_box.exec_()
        self.lineEdit.setText(str(filename))

    # 全存
    def save_Alldata(self):
        # 获取label显示的图片
        pixmap_1 = self.label_4.pixmap()
        pixmap_2 = self.label_6.pixmap()

        # 获取lineEdit的文本
        text = self.plainTextEdit.toPlainText()

        # 弹出文件保存对话框，选择保存路径和文件名
        file_dialog = QFileDialog()
        file_path = file_dialog.getExistingDirectory(self, '选择文件夹')

        if file_path:
            # 保存图片
            if pixmap_1 is not None:
                pixmap_1.save(file_path + "/图像处理.jpg", "JPG")
            if pixmap_2 is not None:
                pixmap_2.save(file_path + "/抓取图.jpg", "JPG")

            # 保存文本
            if text:
                with open(file_path + "/text.txt", "w") as file:
                    file.write(text)
        msg_box = QMessageBox(QMessageBox.Information, '提示', '保存成功')
        msg_box.exec_()

    # 保存文本文件
    def saveTextFile(self):
        fd, fp = QFileDialog.getSaveFileName(self.centralwidget, "保存文件", "", "*.txt;;All Files(*)")
        f = open(fd, 'w')
        f.write(self.plainTextEdit.toPlainText())
        f.close()
        self.lineEdit.setText(str(fd))
        msg_box = QMessageBox(QMessageBox.Information, '提示', '保存成功')
        msg_box.exec_()
    '''清理日志'''
    def clearText(self):
        self.plainTextEdit.clear()

    def show_processing_dialog(self):
        self.processing_dialog = QMessageBox(self)
        self.processing_dialog.setWindowTitle("处理中")
        self.processing_dialog.setText("正在处理图像，请稍候...")
        # self.processing_dialog.setStandardButtons(QMessageBox.NoButton)
        self.processing_dialog.show()

    def close_processing_dialog(self):
        if self.processing_dialog is not None:
            self.processing_dialog.close()
            self.processing_dialog = None

    '''导入权重文件或者模型文件'''
    def copyWeightFile(self):
        # 获取当前权重文件所在的目录
        current_dir = os.path.join(os.getcwd(), 'weight')

        # 要加载的文件路径,[0]表示仅取路径
        source_file = QFileDialog.getOpenFileName(self, '加载权重', "", "*.pth")[0]
        source_file = str(source_file)
        # 获取源文件的文件名
        file_name = os.path.basename(source_file)

        # 将权重加载到权重目录
        destination_file = os.path.join(current_dir, file_name)
        self.lineEdit.setText(str(file_name))

        try:
            shutil.copy(source_file, destination_file)
            # print("File copied successfully!")
            msg_box = QMessageBox(QMessageBox.Information, '提示', 'File copied successfully!')
            msg_box.exec_()
        except IOError as e:
            # print(f"Unable to copy file. Error: {e}")
            msg_box = QMessageBox(QMessageBox.Information, '提示', f"Unable to copy file. Error: {e}")
            msg_box.exec_()

    def copyModelFile(self):
        # 获取当前程序所在的目录
        current_dir = os.path.join(os.getcwd(), 'model')

        # 要加载的模型文件路径
        source_file = QFileDialog.getOpenFileName(self, '加载模型', "", "*.py")[0]
        source_file = str(source_file)
        # 获取源文件的文件名
        main_name = os.path.basename(source_file)

        # 将权重加载到模型目录
        destination_file = os.path.join(current_dir, main_name)
        self.lineEdit.setText(str(main_name))
        # print(main_name)
        # print(source_file)

        try:
            shutil.copy(source_file, destination_file)
            # print("File copied successfully!")
            msg_box = QMessageBox(QMessageBox.Information, '提示', 'File copied successfully!')
            msg_box.exec_()
        except IOError as e:
            # print(f"Unable to copy file. Error: {e}")
            msg_box = QMessageBox(QMessageBox.Information, '提示', f"Unable to copy file. Error: {e}")
            msg_box.exec_()

    # **********************************************************************************************
    #     def switch_model(self, index):
    #         model_name = self.models_combobox.currentText()
    #
    #         if model_name == "ShuffleNetV2":
    #             weight_file = "shufflenetv2.pth"  # 替换为ShuffleNetV2对应的权重文件
    #             self.model = ShuffleNetV2()  # 替换为ShuffleNetV2的模型初始化
    #         elif model_name == "MobileNetV3_small":
    #             weight_file = "mobilenetv3_small.pth"  # 替换为MobileNetV3_small对应的权重文件
    #             self.model = MobileNetV3_small()  # 替换为MobileNetV3_small的模型初始化
    #
    #         # 加载权重文件
    #         self.model.load_weights(weight_file)
    #
    #         # 进行图像识别
    #         self.recognize_image()
    #
    #     def recognize_image(self):
    #         if self.images:
    #             image_path = self.images[self.current_image_index]
    #             image = QImage(image_path)
    #             # 在此处执行图像识别的逻辑，使用 self.model 进行识别
    #             # 将识别结果显示在相应的控件上
    #
    #     def start_recognition(self):
    #         self.recognize_image()

    # ************************************************************************************************

    def open_dialog(self):
        '''
        文本标注
        '''
        self.predictImg = None
        if not hasattr(self, "captured"):
            self.plainTextEdit.setPlainText("no image select, to return")  # 如果没有加载图片，则预警
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未导入图片')
            msg_box.exec_()
            return
        if not hasattr(self, "predictImg"):
            self.plainTextEdit.setPlainText("no image select, to return")
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '未抓取图片')
            msg_box.exec_()
            return
        if self.predictImg:
            self.plainTextEdit.appendPlainText("captureImage")  # 以添加新行的方式将识别结果载入界面
            self.predictImg = self.get_image_from_label(self.label_6)  # 获取摄像图片截图
        else:
            self.predictImg = Image.fromarray(self.captured)
        dialog = QDialog(self)
        dialog.setWindowTitle("文本标注对话框")

        layout = QVBoxLayout()

        text_label = QLabel("输入标注文本:", dialog)
        layout.addWidget(text_label)

        text_input = QLineEdit(dialog)
        layout.addWidget(text_input)

        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, dialog)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        layout.addWidget(button_box)

        dialog.setLayout(layout)

        if dialog.exec_() == QDialog.Accepted:
            annotation_text = text_input.text()
            # 获取图像并转成pix格式
            # self.captured = cv2.cvtColor(self.captured, cv2.COLOR_BGR2RGB)
            # pixmap = QPixmap(self.predictImg)

            pixmap = QPixmap(filename)

            # 根据图像大小调整字体大小和位置
            font_size = min(pixmap.width() // 20, pixmap.height() // 20)
            font = QFont("Arial", font_size)

            text_width = font_size * len(annotation_text)
            text_height = font_size

            text_x = (pixmap.width() - text_width) // 15
            text_y = (pixmap.height() - text_height) // 10 + font_size

            # 在图像上添加标注文本
            painter = QPainter(pixmap)
            painter.setPen(Qt.red)
            painter.setFont(font)
            painter.drawText(text_x, text_y, annotation_text)
            painter.end()

            self.annotated_pixmap = pixmap
            # self.label_4.setPixmap(self.annotated_pixmap.scaled(350, 400))
            # self.label_4.setPixmap(self.annotated_pixmap.scaled(400, 350))
            self.label_4.setPixmap(self.annotated_pixmap.scaled(
                self.label_4.size(), aspectRatioMode=QtCore.Qt.KeepAspectRatio))

    # 清屏重新开始
    def Newbuild(self):
        self.plainTextEdit.clear()
        self.label_3.clear()
        self.label_4.clear()
        self.label_5.clear()
        self.label_6.clear()
        self.lineEdit.clear()
        msg_box = QMessageBox(QMessageBox.Information, '提示', '新建成功')
        msg_box.exec_()

    # 帮助：跳转邮件界面
    def open_email_client(self):
        email_address = "fengchuan2021@126.com"
        url = QUrl("mailto:" + email_address)
        QDesktopServices.openUrl(url)

    def open_github_project(self):
        url = QUrl("https://github.com/vontran2021/python/tree/main/Tobacco")
        QDesktopServices.openUrl(url)

    def BuildNone(self):
        # msg_box = QMessageBox(QMessageBox.Information, '提示', '开发中...')
        # msg_box.exec_()
        # os.system('python Video_torchChinese.py Mike')
        model_name = self.comboBox.currentText()  # 获取模型类别下拉菜单“类别字符串”
        print(model_name)

        # 模型加载
        if model_name == "烟叶成熟度":
            ViFresh.Viseo_torchPredict()
        elif model_name == "烘烤阶段":
            ViCuring.Viseo_torchPredict()
        elif model_name == "烤烟等级":
            ViFlued.Viseo_torchPredict()


class Ui_MyWindow1(QtWidgets.QMainWindow):

    def __init__(self):
        super(Ui_MyWindow1, self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)

    def setupUi(self, MyWindow):
        MyWindow.setObjectName("MainWindow")
        MyWindow.resize(600, 300)
        # MyWindow.setWindowIcon(QIcon('swu.png'))
        MyWindow.setStyleSheet("background-image:url(backgrand.png)")
        self.centralwidget = QtWidgets.QWidget(MyWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(190, 100, 50, 30))
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(240, 100, 200, 30))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(190, 150, 40, 18))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(240, 150, 200, 30))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButtonOK = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonOK.setGeometry(QtCore.QRect(220, 200, 75, 23))
        self.pushButtonOK.setObjectName("pushButtonOK")
        # self.pushButtonOK.setStyleSheet("QPushButton{font - family: '宋体';font - size: 30px;color: rgb(0, 0, 255, 255);} \
        # QPushButtonbackground - color: rgb(170, 200, 50)}\ QPushButton: hover{background - color: rgb(50, 170, 200)}")

        self.pushButtonCancel = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonCancel.setGeometry(QtCore.QRect(320, 200, 75, 23))
        self.pushButtonCancel.setObjectName("pushButtonCancel")
        MyWindow.setCentralWidget(self.centralwidget)

        self.pushButtonOK.clicked.connect(self.user_login)
        self.pushButtonCancel.clicked.connect(MyWindow.close)
        self.retranslateUi(MyWindow)
        QtCore.QMetaObject.connectSlotsByName(MyWindow)

    def retranslateUi(self, MyWindow):
        _translate = QtCore.QCoreApplication.translate
        MyWindow.setWindowTitle(_translate("MainWindow", "基于神经网络的烟草图像分析系统V1.0"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "请输入帐号"))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "请输入密码"))
        self.label.setText(_translate("MainWindow", "账号"))
        self.label_2.setText(_translate("MainWindow", "密码"))
        self.pushButtonOK.setText(_translate("MainWindow", "确定"))
        # self.pushButtonOK.setStyleSheet("QPushButton{font - family: '宋体';font - size: 30px;color: rgb(0, 0, 255, 255);} \
        #         QPushButtonbackground - color: rgb(170, 200, 50)}\ QPushButton: hover{background - color: rgb(50, 170, 200)}")
        self.pushButtonCancel.setText(_translate("MainWindow", "取消"))

    def user_login(self):
        usr_name = self.lineEdit.text()
        usr_pwd = self.lineEdit_2.text()
        if usr_name == 'XNDX' and usr_pwd == '123456':
            QMessageBox.information(self, '消息', '登录成功')

            ui_hello.show()
            myWindow.close()
        else:
            # QMessageBox.information(self, '消息', '账号或密码错误')
            QMessageBox.warning(self,
                                "警告",
                                "登录失败！",
                                QMessageBox.Yes)

            self.lineEdit.setFocus()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    myWindow = Ui_MyWindow1()
    ui_hello = Ui_MyWindow()
    myWindow.show()
    sys.exit(app.exec_())
